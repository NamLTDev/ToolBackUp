package com.osp.npo.common.util;
import com.osp.npo.task.BackupThreadAuto;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Logger;

/**
 * Created by QUYENLC on 12/07/2021.
 */
public class ConfigBackupDatabaseManager {
    private static final Logger logger = Logger.getLogger(BackupThreadAuto.class.getName());
    private static final String file_name_bat = "backup.bat";
    private String database;
    private String user;
    private String pass;
    private String host;
    private String port;
    private String system_backup_os;
    private String system_backup_database_folder;
    private String system_mysql_mysqldump_folder;

    public void init() {
        try {
            Properties prop = new Properties();
            System.out.println(System.getProperty("user.dir") + "/config.xml");
            prop.loadFromXML(new FileInputStream(System.getProperty("user.dir") + "/config.xml"));
            database = prop.getProperty("database");
            user = prop.getProperty("userName");
            pass = prop.getProperty("password");
            host = prop.getProperty("host");
            port = prop.getProperty("port");
            system_backup_os = prop.getProperty("system_backup_os");
            system_backup_database_folder = prop.getProperty("system_backup_database_folder");
            system_mysql_mysqldump_folder = prop.getProperty("system_mysql_mysqldump_folder");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public String createBackupFileBat(int type) {
        System.out.println("vào ConfigBackupDatabaseManager hàm createBackupFileBat ---------------------------------");
        init();
        try {
            String filebat = file_name_bat;
            if (system_backup_os.equals("1")){
                filebat = "backup.sh";
            }
            File file = new File(system_backup_database_folder + filebat);
            File folder = new File(system_backup_database_folder);
            if (file.exists()) {
                file.delete();
            } else {
                if (!folder.exists())
                    folder.mkdirs();
            }
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file, "UTF-8");
            writer.println("cd " + system_mysql_mysqldump_folder);
            String oDia = system_mysql_mysqldump_folder.substring(0, 2);
            writer.println(oDia);
            Calendar cal = Calendar.getInstance();
            int date = cal.get(Calendar.DATE);
            int monday = cal.get(Calendar.MONDAY) + 1;
            String DATE = String.valueOf(cal.get(Calendar.DATE));
            String MONDAY = String.valueOf(cal.get(Calendar.MONDAY) + 1);
            if(date < 10){
                DATE = "0" + DATE;
            }
            if(monday < 10){
                MONDAY = "0" + MONDAY;
            }

            Date datenow = new Date();
            Format formatter = new SimpleDateFormat("yyyy-MM-dd");
            String dateNow = formatter.format(datenow);
            System.out.println("Ngày hôm nay là: " + dateNow);

            String[] words = dateNow.split("-");
            String year = words[0];
            String month = words[1];
            String day = words[2];
            int yearNow = Integer.parseInt(year);
            int threeYearAgo= yearNow -3;
            String threesYearAgo = String.valueOf(threeYearAgo) + "-" + month + "-" + day;


            String filename = "backup-" + cal.get(Calendar.YEAR) + "-" + MONDAY + "-" + DATE + "-" + cal.get(Calendar.HOUR_OF_DAY) + "-" + cal.get(Calendar.MINUTE) + "-" + cal.get(Calendar.SECOND) + ".sql";

            if(type == 0){
                writer.println("mysqldump -u" + user + " -p" + pass + " -h" + host + " -P" + port + " " + database + " -r \"" + system_backup_database_folder + filename);
            }
            else if(type == 1) {
                String tableBackUp = Util.getParam("Vui lòng chọn bảng dữ liệu muốn backup?(Lưu ý:backup nhiều bảng thì phải nhập cách nhau bằng dấu phẩy)", "");
                if(tableBackUp == ""){
                    Util.exit();
                }
                else if(!"npo_contract_history".equals(tableBackUp)){
                    tableBackUp = tableBackUp.replaceAll(","," ");
                    writer.println("mysqldump -u" + user + " -p" + pass + " -h" + host + " -P" + port + " " + database + " "+ tableBackUp +" -r \"" + system_backup_database_folder + filename);
                }
                else {
                    String sql = "tpid in(select tpid from npo_transaction_property where update_date_time >= '"+threesYearAgo+"')";
                    writer.println("mysqldump -u" + user + " -p" + pass + " -h" + host + " -P" + port + " " + database + " --tables" +" " + tableBackUp + " --lock-all-tables --where=\""+sql+"\" -r \"" + system_backup_database_folder + filename);
                }
            }
            writer.println("Exit");
            writer.close();
            return filename;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
}
