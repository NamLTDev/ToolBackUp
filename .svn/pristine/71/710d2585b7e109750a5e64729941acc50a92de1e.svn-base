package com.osp.npo.task;
import com.osp.npo.common.util.database.DBPool;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.concurrent.Callable;
import java.util.logging.Logger;

public class BackUpFileDataCallable implements Callable {
    private Connection connection;
    private int total;
    private int page;
    private String timeBackUp;
    private static BackUpFileDataCallable instance;
    private static final Logger logger = Logger.getLogger(BackUpFileDataCallable.class.getName());
    public BackUpFileDataCallable(int pages , String timeBackUp){
        this.page = pages;
        this.timeBackUp = timeBackUp;
    }

    @Override
    public Boolean call() throws Exception {
        connection = DBPool.makeDBConnection();
        selectDataFileByTime(page,timeBackUp);
        return true;
    }


    public int selectDataFileByTime(int page, String timeBackUp) throws SQLException {
        int rowPerPage = 1000;
        int offset = rowPerPage * (page - 1);
        StringBuilder str = new StringBuilder();
        str.append("INSERT INTO phpviet_file_data2 ");
        str.append("SELECT file_data.* FROM phpviet_file_data file_data ");
        str.append("INNER JOIN phpviet_file file ");
        str.append("ON file_data.file_id = file.file_id ");
        str.append("WHERE file.upload_date >= '"+timeBackUp+"' ");
        str.append("LIMIT "+ offset +","+ rowPerPage +"");
        PreparedStatement ps = null;
        int result = -1;
        if (connection != null) {
            ps = connection.prepareStatement(String.valueOf(str));
            result = ps.executeUpdate();
            ResultSet rs = ps.getGeneratedKeys();
            rs.next();
            connection.close();
        } else {
            logger.warning("Không kết nối được đến database");
        }
        return result;
    }

    public static synchronized BackUpFileDataCallable getInstance(int page, String timeBackUp) {
        if (instance == null) {
            instance = new BackUpFileDataCallable(page, timeBackUp);
        }
        return instance;
    }

    public Connection getConnection() {
        return connection;
    }

    public void setConnection(Connection connection) {
        this.connection = connection;
    }

    public int getTotal() {
        return total;
    }

    public void setTotal(int total) {
        this.total = total;
    }

    public int getPage() {
        return page;
    }

    public void setPage(int page) {
        this.page = page;
    }

    public String getTimeBackUp() {
        return timeBackUp;
    }

    public void setTimeBackUp(String timeBackUp) {
        this.timeBackUp = timeBackUp;
    }

    public static BackUpFileDataCallable getInstance() {
        return instance;
    }

    public static void setInstance(BackUpFileDataCallable instance) {
        BackUpFileDataCallable.instance = instance;
    }

    public static Logger getLogger() {
        return logger;
    }
}
