package com.osp.npo.task;

import com.osp.npo.common.util.*;
import com.osp.npo.common.util.database.DBPool;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;
import java.util.logging.Logger;
/**
 * Created by QUYENLC on 12/07/2021.
 */
public class BackupThreadAuto extends Thread {
    private static final Logger logger = Logger.getLogger(BackupThreadAuto.class.getName());
    private String system_backup_os;
    private String system_backup_database_folder;
    private String status;
    private String timeBackup;
    private int delay_time;

    public static void main(String[] arg) {
        new BackupThreadAuto().start();
    }

    public void init() {
        try {
            Properties prop = new Properties();
            System.out.println(System.getProperty("user.dir") + "/config.xml");
            prop.loadFromXML(new FileInputStream(System.getProperty("user.dir") + "/config.xml"));
            system_backup_os = prop.getProperty("system_backup_os");
            system_backup_database_folder = prop.getProperty("system_backup_database_folder");
            status = prop.getProperty("status");
            timeBackup = prop.getProperty("timeBackup");
            delay_time = Integer.parseInt(prop.getProperty("delay_time"));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    public void run() {
        init();
        while (true) {
            Calendar cal = Calendar.getInstance();
            Util util = new Util();
            List<String> listDateBackup = util.convertListBooleanToListString();
            String dayOfWeek = util.getDayOfWeek(cal.get(Calendar.DAY_OF_WEEK));
            if (listDateBackup.size() > 0) {
                for (int i = 0; i < listDateBackup.size(); i++) {
                    if (dayOfWeek.equals(listDateBackup.get(i))) {
                        try {
                            if (cal.get(Calendar.HOUR_OF_DAY) == Integer.parseInt(timeBackup.split(":")[0])) {
                                if (cal.get(Calendar.MINUTE) == Integer.parseInt(timeBackup.split(":")[1])) {
                                    if (status.equals("true")) {
                                        logger.info("Tiến hành backup-----------------------------------");
                                        this.backupDBAll();
                                    } else {
                                        logger.info("Ngày không tiến hành sao lưu dữ liệu-----------------------------------");
                                    }
                                } else {
                                    logger.info("Chờ-----------------------------------");
                                }
                            }
                            else {
                                logger.info("Chờ-----------------------------------");
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        break;
                    }
                }
            }
            try {
                sleep(60000);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }

    public void backupDBAll(){
        try {
            ConfigBackupDatabaseManager cfManager = new ConfigBackupDatabaseManager();
            String fileName = cfManager.createBackupFileBat(0);
            Runtime c = Runtime.getRuntime();
            String cmd = "cmd /c start " + system_backup_database_folder + "backup.bat";
            Process pro;
            if (system_backup_os.equals("0")) {
                pro = c.exec(cmd, null, new File(system_backup_database_folder));
            } else {
                pro = c.exec(system_backup_database_folder + "backup.sh",
                        null, new File(system_backup_database_folder));
            }
            if (pro.waitFor() == 0) {
                logger.info("Back up dữ liệu thành công");
                int valueTime = pro.exitValue();
            } else {
                logger.warning("Back up dữ liệu thất bại.Vui lòng thử lại");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

//    public void createTable(){
//        try{
//            String myTableName = "CREATE TABLE AgentDetail ("
//                    + "idNo INT(64) NOT NULL AUTO_INCREMENT,"
//                    + "initials VARCHAR(255),"
//                    + "agentCount INT(64), "
//                    + "PRIMARY KEY(idNo))";
//            Connection connection = DBPool.makeDBConnection();
//            if(connection!=null){
//                Statement statement = connection.createStatement();
//                statement.executeUpdate(myTableName);
//                logger.info("Table Created");
//            }
//            else {
//                logger.warning("Error connection database");
//            }
//        }
//        catch (SQLException e ) {
//            logger.warning("An error has occured on Table Creation");
//            e.printStackTrace();
//        }
//    }
//    public void insert(int idNo, String initials , int agentCount){
//        try{
//            String myTableName = "INSERT INTO AgentDetail(idNo,initials,agentCount) VALUES("+idNo+","+"'"+initials+"'"+","+agentCount+")";
//            Connection connection = DBPool.makeDBConnection();
//            if(connection!=null){
//                Statement statement = connection.createStatement();
//                statement.executeUpdate(myTableName);
//                logger.info("Thêm mới dữ liệu thành công");
//            }
//            else {
//                logger.warning("Error connection database");
//            }
//        }
//        catch (SQLException e ) {
//            logger.warning("Thêm mới dữ liệu thất bại");
//            e.printStackTrace();
//        }
//    }
}
