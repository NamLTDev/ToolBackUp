package com.osp.npo.common.controller;

import com.osp.npo.common.util.ConfigBackupDatabaseManager;
import com.osp.npo.common.util.Util;
import com.osp.npo.common.util.database.DBPool;

import java.io.File;
import java.io.FileInputStream;
import java.sql.*;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Logger;

public class BackupController {
    private static final Logger logger = Logger.getLogger(BackupController.class.getName());
    private String system_backup_os;
    private String system_backup_database_folder;
    private String datesConfig;
    private Util util;
    private Connection connection;
    private int start = 0;
    private int limit = 10;

    public void init() {
        try {
            Properties prop = new Properties();
            System.out.println(System.getProperty("user.dir") + "/config.xml");
            prop.loadFromXML(new FileInputStream(System.getProperty("user.dir") + "/config.xml"));
            system_backup_os = prop.getProperty("system_backup_os");
            system_backup_database_folder = prop.getProperty("system_backup_database_folder");
            datesConfig = prop.getProperty("datesConfig");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void backupDBAll() {
        init();
        try {
            ConfigBackupDatabaseManager cfManager = new ConfigBackupDatabaseManager();
            String fileName = cfManager.createBackupFileBat(0);
            Runtime c = Runtime.getRuntime();
            String cmd = "cmd /c start " + system_backup_database_folder + "backup.bat";
            Process pro;
            if (system_backup_os.equals("0")) {
                pro = c.exec(cmd, null, new File(system_backup_database_folder));
            } else {
                pro = c.exec(system_backup_database_folder + "backup.sh",
                        null, new File(system_backup_database_folder));
            }
            if (pro.waitFor() == 0) {
                System.out.println("Back up dữ liệu thành công");
            } else {
                System.out.println("Back up dữ liệu thất bại.Vui lòng thử lại");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void backupDBBySelectTable() {
        init();
        try {
            ConfigBackupDatabaseManager cfManager = new ConfigBackupDatabaseManager();
            String fileName = cfManager.createBackupFileBat(1);
            Runtime c = Runtime.getRuntime();
            String cmd = "cmd /c start " + system_backup_database_folder + "backup.bat";
            Process pro;
            if (system_backup_os.equals("0")) {
                pro = c.exec(cmd, null, new File(system_backup_database_folder));
            } else {
                pro = c.exec(system_backup_database_folder + "backup.sh",
                        null, new File(system_backup_database_folder));
            }
            if (pro.waitFor() == 0) {
                System.out.println("Back up dữ liệu theo bảng thành công");
//                int valueTime = pro.exitValue();
//                System.out.println("Thời gian:"+valueTime);
            } else {
                System.out.println("Back up dữ liệu theo bảng thất bại.Vui lòng thử lại");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void run() throws SQLException {
        connection = DBPool.makeDBConnection();
        if(connection != null) {
            int totalRecord = count();
            for (int i = 0; i <= totalRecord; i += 10) {
                if (totalRecord > 0) {
                    if (start == totalRecord || start > totalRecord) {
                        logger.info("Back up dữ liệu data file thành công");
                    } else {
                        int result = selectDataFileByTime(start, limit);
                        if (result == 10) {
                            start = limit;
                        }
                    }
                }
            }
        }
    }

    public void createTable() {
        try {
            String myTableName = "CREATE TABLE AgentDetail ("
                    + "idNo INT(64) NOT NULL AUTO_INCREMENT,"
                    + "initials VARCHAR(255),"
                    + "agentCount INT(64), "
                    + "PRIMARY KEY(idNo))";
            if (connection != null) {
                Statement statement = connection.createStatement();
                statement.executeUpdate(myTableName);
                logger.info("Table Created");
            } else {
                logger.warning("Error connection database");
            }
        } catch (SQLException e) {
            logger.warning("An error has occured on Table Creation");
            e.printStackTrace();
        }
    }

    //    public void insert(int idNo, String initials , int agentCount){
//        try{
//            String myTableName = "INSERT INTO AgentDetail(idNo,initials,agentCount) VALUES("+idNo+","+"'"+initials+"'"+","+agentCount+")";
//            if(connection!=null){
//                Statement statement = connection.createStatement();
//                statement.executeUpdate(myTableName);
//                logger.info("Thêm mới dữ liệu thành công");
//            }
//            else {
//                logger.warning("Error connection database");
//            }
//        }
//        catch (SQLException e ) {
//            logger.warning("Thêm mới dữ liệu thất bại");
//            e.printStackTrace();
//        }
//    }
    public int count() throws SQLException {
        int result = 0;
        StringBuilder str = new StringBuilder();
        str.append("SELECT COUNT(*) FROM phpviet_file_data file_data ");
        str.append("INNER JOIN phpviet_file file ");
        str.append("ON file_data.file_id = file.file_id ");
        str.append("WHERE file.upload_date >= '"+timeBackUpDataTo()+"'");
        PreparedStatement ps = null;
        if (connection != null) {
            ps = connection.prepareStatement(String.valueOf(str));
            ResultSet rs = null;
            rs = ps.executeQuery();
            rs.next();
            result = rs.getInt(1);
            logger.info("Thêm mới dữ liệu thành công");
        } else {
            logger.warning("Error connection database");
        }
        return result;
    }

    public int selectDataFileByTime(int start, int limit) throws SQLException {
        StringBuilder str = new StringBuilder();
        str.append("INSERT INTO phpviet_file_data2 SELECT file_data.* FROM phpviet_file_data file_data ");
        str.append("INNER JOIN phpviet_file file ");
        str.append("ON file_data.file_id = file.file_id ");
        str.append("WHERE file.upload_date >= '"+timeBackUpDataTo()+"' LIMIT " + start + "," + limit + "");
        PreparedStatement ps = null;
        int result = -1;
        if (connection != null) {
            ps = connection.prepareStatement(String.valueOf(str));
            result = ps.executeUpdate();
//            if(rs.next()){
//                logger.info("Thêm mới dữ liệu thành công");
//            }
            ResultSet rs = ps.getGeneratedKeys();
            rs.next();
        } else {
            logger.warning("Error connection database");
        }
        return result;
    }

    public boolean tableExits() throws SQLException {
        boolean tableExits = false;
        DatabaseMetaData databaseMetaData = connection.getMetaData();
        ResultSet tables = databaseMetaData.getTables(null, null, "AgentDetail", null);
        if (tables.next()) {
            tableExits = true;
        } else {
            tableExits = false;
        }
        return tableExits;
    }
    public String timeBackUpDataTo(){
        String threesYearAgo = "";
        java.util.Date datenow = new Date();
        Format formatter = new SimpleDateFormat("yyyy-MM-dd");
        String dateNow = formatter.format(datenow);
        System.out.println("Ngày hôm nay là: " + dateNow);

        String[] words = dateNow.split("-");
        String year = words[0];
        String month = words[1];
        String day = words[2];
        int yearNow = Integer.parseInt(year);
        int threeYearAgo= yearNow -3;
        threesYearAgo = String.valueOf(threeYearAgo) + "-" + month + "-" + day;
        return threesYearAgo;
    }
}
